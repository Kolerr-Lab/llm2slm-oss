# CI/CD Pipeline for LLM2SLM
# Note: Configure the following secrets in GitHub repository settings:
#   - PYPI_API_TOKEN: PyPI API token for package publishing
#   - DOCKER_USERNAME: Docker Hub username
#   - DOCKER_PASSWORD: Docker Hub password or access token
# Note: Create 'release' environment in GitHub repository settings for deployment

name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
        tags: ["v*"]
    pull_request:
        branches: [main, develop]

env:
    PYTHON_VERSION: "3.11"
    NODE_VERSION: "18"

jobs:
    # ────────────────────────────────────────────────────────────────────────────────
    # Code Quality and Linting
    # ────────────────────────────────────────────────────────────────────────────────
    quality:
        name: Code Quality
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Cache pip dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,all]"

            - name: Run pre-commit hooks
              uses: pre-commit/action@v3.0.0

            - name: Format check with Black
              run: black --check --diff src/ tests/

            - name: Import sorting check with isort
              run: isort --check-only --diff src/ tests/

            - name: Lint with flake8
              run: flake8 src/ tests/

            - name: Type check with mypy
              run: mypy src/

            - name: Security check with bandit
              run: bandit -r src/

    # ────────────────────────────────────────────────────────────────────────────────
    # Testing Matrix
    # ────────────────────────────────────────────────────────────────────────────────
    test:
        name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
                exclude:
                    # Reduce matrix size for pull requests
                    - os: windows-latest
                      python-version: "3.8"
                    - os: windows-latest
                      python-version: "3.9"
                    - os: macos-latest
                      python-version: "3.8"
                    - os: macos-latest
                      python-version: "3.9"

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache pip dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/pip
                      ~/.local/share/virtualenvs
                  key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
                  restore-keys: |
                      ${{ runner.os }}-${{ matrix.python-version }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,all]"

            - name: Run tests with pytest
              run: |
                  pytest tests/ \
                    --cov=src/llm2slm \
                    --cov-report=xml \
                    --cov-report=term-missing \
                    --junitxml=junit.xml \
                    -v

            - name: Upload coverage to Codecov
              if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

            - name: Upload test results
              uses: actions/upload-artifact@v3
              if: always()
              with:
                  name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
                  path: |
                      junit.xml
                      coverage.xml
                      htmlcov/

    # ────────────────────────────────────────────────────────────────────────────────
    # Integration Tests
    # ────────────────────────────────────────────────────────────────────────────────
    integration:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: [quality, test]
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration'))

        services:
            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,server,all]"

            - name: Run integration tests
              env:
                  REDIS_URL: redis://localhost:6379/0
                  LLM2SLM_LOG_LEVEL: DEBUG
              run: |
                  pytest tests/ -m integration -v --tb=short

            - name: Test CLI commands
              run: |
                  python -m llm2slm --help
                  python -m llm2slm list --provider openai || true

            - name: Test server startup
              run: |
                  timeout 30s uvicorn llm2slm.server.app:create_app --host 0.0.0.0 --port 8000 &
                  sleep 10
                  curl -f http://localhost:8000/health
                  curl -f http://localhost:8000/docs

    # ────────────────────────────────────────────────────────────────────────────────
    # Docker Build and Test
    # ────────────────────────────────────────────────────────────────────────────────
    docker:
        name: Docker Build
        runs-on: ubuntu-latest
        needs: [quality]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  target: production
                  tags: llm2slm:test
                  load: true
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Test Docker image
              run: |
                  docker run --rm -d --name llm2slm-test -p 8000:8000 llm2slm:test
                  sleep 10
                  curl -f http://localhost:8000/health
                  docker stop llm2slm-test

            - name: Run container security scan
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "llm2slm:test"
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results
              uses: github/codeql-action/upload-sarif@v2
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # ────────────────────────────────────────────────────────────────────────────────
    # Security Scanning
    # ────────────────────────────────────────────────────────────────────────────────
    security:
        name: Security Scan
        runs-on: ubuntu-latest
        permissions:
            security-events: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev]"

            - name: Run Bandit security scan
              run: |
                  bandit -r src/ -f json -o bandit-report.json || true

            - name: Upload Bandit scan results
              uses: actions/upload-artifact@v3
              with:
                  name: bandit-results
                  path: bandit-report.json

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v2
              with:
                  languages: python

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v2

    # ────────────────────────────────────────────────────────────────────────────────
    # Build and Package
    # ────────────────────────────────────────────────────────────────────────────────
    build:
        name: Build Package
        runs-on: ubuntu-latest
        needs: [quality, test]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Full history for proper versioning

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine

            - name: Build package
              run: python -m build

            - name: Check package
              run: twine check dist/*

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: dist-packages
                  path: dist/

    # ────────────────────────────────────────────────────────────────────────────────
    # Release (only on tags)
    # ────────────────────────────────────────────────────────────────────────────────
    release:
        name: Release
        runs-on: ubuntu-latest
        needs: [quality, test, integration, docker, security, build]
        if: startsWith(github.ref, 'refs/tags/v')
        # Note: Create 'release' environment in GitHub repository settings
        environment: release
        permissions:
            contents: write
            id-token: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: dist-packages
                  path: dist/

            # Note: Add PYPI_API_TOKEN secret in GitHub repository settings
            - name: Publish to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  password: ${{ secrets.PYPI_API_TOKEN }}

            - name: Create GitHub Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ github.ref_name }}
                  body: |
                      See [CHANGELOG.md](https://github.com/llm2slm/llm2slm/blob/main/CHANGELOG.md) for details.
                  draft: false
                  prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

            # Note: Add DOCKER_USERNAME and DOCKER_PASSWORD secrets in GitHub repository settings
            - name: Build and push Docker image
              run: |
                  echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
                  docker build -t llm2slm/llm2slm:${{ github.ref_name }} -t llm2slm/llm2slm:latest .
                  docker push llm2slm/llm2slm:${{ github.ref_name }}
                  docker push llm2slm/llm2slm:latest

    # ────────────────────────────────────────────────────────────────────────────────
    # Documentation Deploy
    # ────────────────────────────────────────────────────────────────────────────────
    docs:
        name: Deploy Documentation
        runs-on: ubuntu-latest
        needs: [quality, test]
        if: github.ref == 'refs/heads/main'
        permissions:
            pages: write
            id-token: write

        # Note: GitHub Pages environment is auto-created when Pages is enabled
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install documentation dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev]"
                  pip install sphinx sphinx-rtd-theme

            - name: Build documentation
              run: |
                  mkdir -p docs/_build/html
                  echo "<h1>LLM2SLM Documentation</h1><p>Coming soon...</p>" > docs/_build/html/index.html

            - name: Setup Pages
              uses: actions/configure-pages@v3

            - name: Upload to GitHub Pages
              uses: actions/upload-pages-artifact@v2
              with:
                  path: docs/_build/html

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v2
